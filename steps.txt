

"packageManager": "npm@10.5.2",
  "overrides": {
    "react": "$react",
    "react-dom": "$react-dom"
  }
npm run dev

go https://authjs.dev/getting-started/installation?framework=Next.js
Authjs -nextjs
npm install next-auth@beta
npx auth secret (cr .env.local)

 -cr Auth.ts copy from website Auth.js
 import NextAuth from "next-auth"
export const { handlers, signIn, signOut, auth } = NextAuth({
  providers: [],
})

-app_F: cr api_F
-api_F: cr auth_F
-auth_F: cr dynamic folder - [...nextauth]
-[...nextauth]: cr route.ts

-Auth.js --> Getting Started-->Authentication-->OAuth
LeftSidebar -->conections-->GitHub-->GitHub - <Creating an OAuth App>
USE INSTRUCTIONSregister a new OAuth app:
Application name      NEXT_DIRECTORY
Homepage URL          http://localhost:3000
Application           Directory for the new era of starups
description  
 Authorization callback URL: https://localhost:3000/api/auth/callback/github
 (Auth.js -->Conections--> GitHub Provider-->Call backURL--> Nextjs)
 just copy 

AFTER in github Copy CLIENT ID : Ov23liQwUTQhCvqVxqCV 
 and put to.env.local
AUTH_SECRET="Fg5qbYm9C+gyEeYRnM49RJa6ll6NpZS+pRViL0N6T50=" # Added by `npx auth`. Read more: https://cli.authjs.dev
AUTH_GITHUB_ID="Ov23liQwUTQhCvqVxqCV"

AFTER in github  Generate a new client secret  CLIENT ID
and put to.env.local
AUTH_GITHUB_SECRET="fa63b4df05a2c50f92c4c01c0d52781976bbd9ef"

-Figma --> cr new file-->frame--> cr Logo -->upload to pc -->
-->upload logo on github

-www.Auth.js : copy configuration and update auth.ts
import NextAuth from "next-auth"
import GitHub from "next-auth/providers/github"
 
export const { handlers, auth, signIn, signOut } = NextAuth({
  providers: [GitHub],
})

-app_F: cr components_F and  cr (root_F)
-components_F:  cr NAvabar.tsx
-(root_F)cr Layotu.tsx 
-page.tsx(Home) mpve to (root_F)

-https://github.com/adrianhajdin/yc_directory?tab=readme-ov-file -->
--> tailwind.config.ts copy 

-npm install tailwindcss-animate
npm install@tailwindcss/typography
 

 -upload zip from https://drive.google.com/file/d/1OEFHnEq5pQFP86u8FOBLBBNxKPsbjjqU/view
 take assets_F and put into  NEXT_DIRECTORY (fonts, logo, favicon.ico)

-favicon.ico move to app_F
-public move to NEXT_DIRECTORY_F outside into app!


-app --> Layout.tsx
change fonts

-globalcss: <How to USE Classes>


=========<How to USE CLASSES CSS to APLY========
in global.css u cr <a @layer utilities> --> inside cr a classe or many classes
foreexample <a .heading>--> inside all styles: text, size others 
but u have add <a @tailwind utilities;>:
And in HOME page or other just put in classname <a heading>:
-global.css
/* @import 'tailwindcss'; */
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer utilities {
  .heading {
    @apply uppercase bg-black px-6 py-3 font-work-sans font-extrabold text-white sm:text-[54px] sm:leading-[64px] text-[36px] leading-[46px] max-w-5xl text-center my-5;
  }
}

-pagwe.tsx:
<h1 className="heading">Home</h1>;
CAN reuse classes in others components
================================================================
- npx shadcn@latest init
choose  NewYork --> slate

❯   Use --force
    Use --legacy-peer-deps //choose this one

After that  tailwind.config.ts and app/global.csss will modify so:
-github/readme/snipets/global.css copy and put in global.css
 tailwind.config.ts --do the same

 - page.tsx add h1, p, 

 yelow transperent lines on pink BG is a lener gradient!
 HOW to FIND or CORECT: 
 in <page.tsx> we have <a section className="pink_container">-->
 --->global.css-->@layer utilities ...-->.pink_container {
    @apply w-full bg-primary min-h-[530px] <A pattern >...-->
-->(global.css) below <a .pattern {>:
.pattern {
    background-image: linear-gradient(
      to right,
      transparent 49.5%,
      rgba(251, 232, 67, 0.2) 49.5%,
      rgba(251, 232, 67, 0.6) 50.5%,
      transparent 50.5%
    );
    background-size: 5% 100%;
    background-position: center;
    background-repeat: repeat-x;
  }

==================<f Create a SearchForm.tsx>=================================
-components_F: cr SearchForm.tsx
-app/root/page: put SearchForm after <p>
  <p className="sub-heading !max-w-3xl">
          Submit Ideas, Vote on Pitches, and Get Noticed in Virtual
          Competitions.
        </p>
        <SearchForm />
      </section>

-components_F : CR     <SearchForm />
  Because  <button type = "reset" onClick={reset}> still on Client side we have to Cr
  a <SearchFormReset.tsx in components_F>
'use client';

import Link from 'next/link';

const SearchFormReset = () => {
  const reset = () => {
    const form = document.querySelector('.search-form') as HTMLFormElement;
    if (form) form.reset();
  };
  return (
    <button type="reset" onClick={reset}>
      <Link href="/" className="search-btn text-white">
        X
      </Link>
    </button>
  );
};
export default SearchFormReset;

-npx shadcn@latest add button
❯  Use --legacy-peer-deps //choose this one

u will get- Created 1 file(- components/ui/button.tsx)

U get 2 components_Folders and u need one but OTSIDE from app
so take Navbar, SeaarchForm, SeaarchFormReset and to move
to components_F where ui_f is

=============<the CR CARDS Sections>==============
after pink Container section
-page.tsx: cr section 
add a section_container

-components_F: cr StartupCard.tsx
-page.tsx: import StartupCard from '@/components/StartupCard';

for new date go to <a lib_f/utils.ts> and add a new func 
 Add: <EyeIcon className="size-6 text-primary" />
          <span>{post.views}</span>
  
Add Link for diferent options 

nextConfig.ts: Cr  remotePatterns: 'https:' -to ALLOW Images from all resources
settings

added  


==============<the SANITY>==================
npm create sanity@latest -- --project e9yqg66k --dataset production --template clean

login by email or google
 Would you like to add configuration files for a 
Sanity project in this Next.js folder? ---Yes
? Do you want to use TypeScript? ---Yes
? Would you like an embedded Sanity Studio? --Yes
? What route do you want to use for the Studio?--- /studio
? Select project template to use ---Clean project with no pr
edefined schema types
? Would you like to add the project ID and dataset to you
r .env.local file? Yes

Then u see <a sanity.cli.ts, sanity.config.ts>  in the project
-sanity_F/lib_F: delete image.ts
How works this app: 
NEXT AUTH--> IF YES CR A SESSION, IF NOT GOT TO GITHUB OAuth ---> get User(info)
-->and Cr Session-->if user exist call to Sanity-->Find user as Author -->
if find return Author  if not CR New Author and return this  Author

-shemaTypes_F: cr author.ts
import { defineField, defineType } from "sanity";
import { UserIcon } from "lucide-react";

export const author = defineType({
    name: "author",
    title: 'Author',
    type: 'document',
    icon: UserIcon,
    fields: [
        defineField({
            name: 'id',
            type: 'number',
        }),
        defineField({
            name: 'name',
            type: 'string',
        }),
        defineField({
            name: 'username',
            type: 'string',
        }),
        defineField({
            name: 'email',
            type: 'string',
        }),
        defineField({
            name: 'image',
            type: 'url',
        }),
        defineField({
            name: 'bio',
            type: 'text',
        }),
    ],
    preview: {
        select:{
            title: 'name',
        },
    },
});

CR f startup.ts
cr structure.ts

npm install sanity-plugin-markdown
-sanity.config.ts: 
'use client';

/**
 * This configuration is used to for the Sanity Studio that’s mounted on the `/app/studio/[[...tool]]/page.tsx` route
 */

import { visionTool } from '@sanity/vision';
import { defineConfig } from 'sanity';
import { structureTool } from 'sanity/structure';

// Go to https://www.sanity.io/docs/api-versioning to learn how API versioning works
import { apiVersion, dataset, projectId } from './sanity/env';
import { schema } from './sanity/schemaTypes';
import { structure } from './sanity/structure';
import { markdownSchema } from 'sanity-plugin-markdown';

export default defineConfig({
  basePath: '/studio',
  projectId,
  dataset,
  // Add and edit the content schema in the './sanity/schemaTypes' folder
  schema,
  plugins: [
    structureTool({ structure }),
    // Vision is for querying with GROQ from inside the Studio
    // https://www.sanity.io/docs/the-vision-plugin
    visionTool({ defaultApiVersion: apiVersion }), //added
    markdownSchema(),
  ],
});

-http://localhost:3000/studio/structure/author:
cr author
cr startup



=======<a Sanity_Studio how to use UI>=======
- http://localhost:3000/studio/structure 
on the top "Structure" and "Vision" --> push "Vision"

LeftSidebar/Query: write *[_type == "startup"] : u will see the result about "startup"
createdAt, category , description and others info...

but if you write *[_type == "startup" && defined(slug.current)]{
  _id, title, slug, _createdAt,
    author, views, description, catergory, image
}
And PUSH "<FETCH>"_button  beloww
//<o defined(slug.current): means its not null>
//<o {_id, title..image}: means what u need to see exactly>

and you get something like:
_createdAt:2025-05-06T14:53:15Z
_id:259f44bc-524a-4340-8181-67baad5af4cc
author:{…} 2 properties
_ref:ff3bf179-300a-49fe-9642-b2711b81e5e1
_type:reference
...

so if u wanna to show about author need write like this:
*[_type == "startup" && defined(slug.current)]{
  _id, 
    title, 
    slug, 
    _createdAt,
    author ->{                       //{}here we write what 
      _id, name, image, bio          //exatcly need
    }, 
    views, 
    description, 
    catergory, 
    image
}

-lib_F: cr queries.ts
import { defineQuery } from 'next-sanity';

export const STARTUPS_QUERY =
  defineQuery(`*[_type == "startup" && defined(slug.current)] | order_(createdAt desc) {
    _id, 
      title, 
      slug, 
      _createdAt,
      author ->{
        _id, name, image, bio
      }, 
      views, 
      description, 
      catergory, 
      image
  }`);


-app/root/page.tsx(home):

=========<W GENERATE Typescript Types (video need to found on youtube)>=========
(2.39)
-terminal: npx sanity@latest schema extract --path=./sanity/extract.json
 u will get <extract.json>
-NEXT_DIRECTORY_F: cr sanity-typegen.json
{
  "path": "./src/**/*.{ts,tsx,js,jsx}",
  "schema": "./sanity/extract.json",
  "generates": "./sanity/types.ts"
}

-  npx sanity@latest typegen generate

-package.json/scripts: add
"predev": "npm run typegen",
    "prebuild": "npm run typegen",
    "typegen": "sanity schema extract --path=./sanity/extract.json && sanity typegen generate"

-npm run typegen
(from sanity/Learn: 
https://www.sanity.io/learn/course/typescripted-content/generating-type-for-groq-query-results)

-StartupCard.tsx: cr type
export type StartupTypeCard = Omit<Startup, 'author'> & { author?: Author };


======<Optimize cash schema for show new post imediatly>======
-http://localhost:3000/studio/structure/startup:
create a new Post:
 satrups_F: copy document by "... in topRightCorner", push "+"(Cr new doc) and paste,
 change slug--> "jsm-academy-masterclass" to "jsm-academy-masterclass-11"

 For <IMMEDITELY SHOW a NEW POST> U Need-->
 -->sanity/lib_F/client.ts: change <t useCdn:true> to  <a 'useCdn: false'>

and <USE Live Content API> https://www.sanity.io/docs/content-lake/live-content-api#471245531c80

-terminal: npm i server-only

-sanity_F/lib: cr live.ts: 
import 'server-only';
import { defineLive } from 'next-sanity';
import { client } from './client';

export const { sanityFetch, SanityLive } = defineLive({
  client: client.withConfig({
    // Live content is currently only available on the experimental API
    // https://www.sanity.io/docs/api-versioning
    apiVersion: 'vX',
  }),
});

- .env.local: add NEXT_PUBLIC_SANITY_API_VERSION="vX"

-root/page.tsx:  const posts = await client.fetch(STARTUPS_QUERY) change to 
<c const { data: posts } = await sanityFetch({ query: STARTUPS_QUERY, });  >

-root/page.tsx: add SanityLive and import 
import { sanityFetch, SanityLive } from '@/sanity/lib/live';
  <p className="no-results">No startups found</p>
          )}
        </ul>
      </section>
      <SanityLive/> //THIS ONE added
    </>

-Sanity_Studio/startup: cr a new post "New Document" by copy doc before
copy doc press "+" , paste doc --> rename --> press generate--> press publish 
and u wil see on web page a new post IMMEDITELY cos using cash , not reload all page


===========<MAKE SEARCH WORK>===============
page.tsx: need params for search
const params = {search: query II null};

and add <params> to:
const { data: posts } = await sanityFetch({ query: STARTUPS_QUERY, <params> });

-queries.ts: change "defineQuery"
defineQuery(`*[_type == "startup" && defined(slug.current) && !defined($search) || title match $search 
|| category match $search || author->name match $search] | order(_createdAt desc) {.....}`);


========<a Create Details Page>==============
-app/root: cr startup_F -->cr new Dynamic folder <a "id">-->[id]_F
-[id]_F: cr dynamic page.tsx by rafce//http://localhost:3000/startup/page
if in home page press on startup - details u will go to dynamic page
smhg like - http://localhost:3000/startup/94870d1b-42ed-4f99-b961-07c0176946c4

-Sanity_Studio/Vision: change Query
*[_type == "startup" && _id == $id][0]{
  _id, 
    title, 
    ...
}
and ad <a id:> by Structure->Startup->Post(JSM Academy...)->Right top corner --> ispect->
-> copy id -> put to params(left side down corner):
{
  id: '8150dece-20f1-4082-aacd-3b48354642e1'
}

- sanity/lib/queries.ts: add from <sanity studio/vision/query>
export const STARTUP_BY_ID_QUERY =
  defineQuery(`*[_type == "startup" && _id == $id][0]{
  _id, 
    title, 
    slug, 
    _createdAt,
    author ->{
      _id, name, username, image, bio
    }, 
    views, 
    description, 
    category, 
    image,
    pitch,
}`);
 from sanity studio/vision/query

- next.config.ts: add  ppr: 'incremental',(still experimental)
import type { NextConfig } from 'next';

const nextConfig: NextConfig = {
  images: {
    dangerouslyAllowSVG: true,
    remotePatterns: [
      {
        protocol: 'https',
        hostname: '*',
      },
    ],
  },
  experimental: {
    ppr: 'incremental',
  },
  devIndicators: {
    appIsrStatus: true,
    buildActivity: true,
    buildActivityPosition: 'bottom-right',
  },
};

export default nextConfig;


-startup/[id]/page.tsx: add
export const experimental_ppr = true;

npm install markdown-it@^14.1.0

-page.tsx: added static elements:
<section className="pink_container !min-h-[230px]">
        <p className="tag">{formatDate(post?._createdAt)}</p>

        <h1 className="heading">{post.title}</h1>
        <p className="sub-heading !max-w-5xl">{post.description}</p>
      </section>

      <section className="section_container">
        <img
          src={post.image}
          alt="thumbnail"
          className="w-full h-auto rounded-xl"
        />

        <div className="space-y-5 mt-10 max-w-4xl mx-auto">
          <div className="flex-between gap-5">
            <Link
              href={`/user/${post.author?._id}`}
              className="flex gap-2 items-center mb-3"
            >
              <Image
                src={post.author.image}
                alt="avatar"
                width={64}
                height={64}
                className="rounded-full drop-shadow-lg"
              />

              <div>
                <p className="text-20-medium">{post.author.name}</p>
                <p className="text-16-medium !text-black-300">
                  @{post.author.username}
                </p>
              </div>
            </Link>

            <p className="category-tag">{post.category}</p>
          </div>
          <h3 className="text-30-bold">Pitch Details</h3>
          {parsedContent ? (
            <article
              className="prose max-w-4xl font-work-sans break-all"
              dangerouslySetInnerHTML={{ __html: parsedContent }}
            />
          ) : (
            <p className="no-result">No details provided</p>
          )}
        </div>
        <hr className="divider" />

-add <dynamic element> (from react) will change in real time 
 <Suspense fallback={<Skeleton className="view_skeleton" />}>
          <View id={id} />
        </Suspense>

npx shadcn@latest add skeleton

-components_F: cr Views.tsx and Ping.tsx